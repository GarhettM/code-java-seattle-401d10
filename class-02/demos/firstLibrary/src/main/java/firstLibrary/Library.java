/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package firstLibrary;
// A Library's purpose is to be consumed by something else
// We don't put a main method inside of a Library
//This class name is POTATO

import java.util.*;

// Process: 1. Define a test in the test file,
// 2. Write the method signature and return in the Library
// 3. Write asserts that test if the method works as best as possible
// 4. Write the code to solve the method's Problem Domain as simple as possible
// 5. If it passes the test, see if you could improve the test,
// repeat 4,5 as much as needed
public class Library {
    public boolean someLibraryMethod() {
        System.out.println("I was run by src/main/java/firstLibrary/LibraryTest.testSomeLibraryMethod");
        return true;
    }

    public static int sum(int num1, int num2){
        return num1 + num2;
    }

    // method that takes in a number and a pet and says I  love you #
    public static String iLoveYou(String petName, int love){
        return String.format("I love %s %d", petName, love);
//        return  "I love Ginger 10000000";
    }

    //    write a method that flips a coin heads or tails and returns "heads" || "tails"
    public static String flipCoin(){
        double rando = Math.random();
        if (rando > 0.5) return "heads";
        return "tails";
    }

    public static void collectionFun(){
        System.out.println("let's practice collections");
//        Lists : a collection that can hold a ordered list of things: Interface ,
//          there is no new List(), a type that holds other Lists
//        Array Lists: Type of list that act just like arrays
//        Set: array like collection that holds only unique values
//        HashMap: collection of key value pairs

        List pets = new ArrayList<String>();
        pets.add("Ginger");
        pets.add("Snowdrop");
        pets.add("Barley");
        pets.add("Mazikeen");
        pets.add("Clover");
        System.out.println(pets);
        System.out.println(pets.get(3));
        pets.clear();
        System.out.println(pets);

        Set<Integer> uniqueNumbers = new HashSet<>();
        HashSet<Integer> uniqueNumbers2 = new HashSet<>();

        uniqueNumbers.add(1);
        uniqueNumbers.add(1);
        uniqueNumbers.add(1);
        uniqueNumbers.add(1);
        uniqueNumbers.add(1);
        uniqueNumbers.add(1);
        uniqueNumbers.add(2);
        System.out.println(uniqueNumbers);

        HashMap<Integer, String> numberText = new HashMap<>();
        numberText.put(1, "One");
        numberText.put(3, "Three");
        numberText.put(7, "Seven");
        System.out.println(numberText);
        numberText.put(1, "Un");
        System.out.println(numberText);
    }

}
