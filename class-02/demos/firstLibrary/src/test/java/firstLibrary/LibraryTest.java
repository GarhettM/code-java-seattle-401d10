/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package firstLibrary;

import org.junit.Test;


import static org.junit.Assert.*;

public class LibraryTest {
    // Library test makes sure the library is not broken so we can consume it elsewhere
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

//     public static int sum(int num1, int num2){
    @Test public void testSum(){
        int expectedOutput = 7;
        int actualOutput = Library.sum(3,4);
        // Purpose compare that int equals the other
        assertEquals("The output should equal the inputs added together", expectedOutput, actualOutput);
        expectedOutput = 14;
        actualOutput = Library.sum(5,9);
        assertEquals("The output should equal the inputs added together", expectedOutput, actualOutput);
        expectedOutput = 5;
        actualOutput = Library.sum(1,4);
        assertEquals("The output should equal the inputs added together", expectedOutput, actualOutput);
    }

    // method that takes in a number and a pet and says I  love you #
    @Test public void testILoveYou(){
        String expectedOutput = "I love Ginger 10000000";
        String actualOutput = Library.iLoveYou("Ginger", 10000000);
        assertEquals("given Ginger and 10000000, it should output 'I love Ginger 10000000'", expectedOutput, actualOutput);
        expectedOutput = "I love Some Other Dog 10";
        actualOutput = Library.iLoveYou("Some Other Dog", 10);
        assertEquals("given Some Other Dog and 10000000, it should output 'I love Some Other Dog 10000000'", expectedOutput, actualOutput);

    }

    @Test public void testFlipCoin(){
        String expectedOutput1 = "heads";
        String expectedOutput2 = "tails";
        String actualOutput = Library.flipCoin();
        assertTrue(
                "library should return heads or tails",
                expectedOutput1 == actualOutput || expectedOutput2 == actualOutput
        );

        int headCount = 0;
        int tailCount = 0;
        for(int i = 0; i < 10000; i++){
            actualOutput = Library.flipCoin();
            if(actualOutput.equals(expectedOutput2)) tailCount++;
            if(actualOutput.equals("heads")) headCount++;
        }

//        assert that headCount and tailCount add to 10000
//        always use the variables expectedOutput2 to represent "tails"


        boolean isBalanced =
                headCount > 4800 &&
                headCount < 5200 &&
                tailCount < 5200 &&
                tailCount > 4800;

        System.out.println("headcount : " + headCount);
        System.out.println("tailcount : " + tailCount);

        assertTrue("heads and tails should each be between 4800-5200", isBalanced);
    }

    @Test public void testThatCollectionsDoesNotErrorOut(){
        Library.collectionFun();
    }

}
