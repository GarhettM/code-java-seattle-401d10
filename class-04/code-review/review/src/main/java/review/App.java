/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package review;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class App {

    public static void main(String[] args) throws Exception {
        System.out.println("App Starting");

        // Problem Domain: Lint the file
        linter("src/main/resources/gates.js");
    }

    public static String linter(String filePathPotato) throws Exception {
//        Print out the line number and that it needs a semicolon
        // get a scanner set up
        // set scanner to a variable
//        Use a hashSet of curly braces, where to put semicolons
//        iterate through the lines check whether it passes whatever test we set up
//        print if there is a problem
        String bigString = "";
        Scanner jsScanner;
        try {
            jsScanner = new Scanner(new File(filePathPotato));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new Exception("That file does not exist, pls make sure it does");
        }
        int counter = 0;
        int totalIssues = 0;
        while(jsScanner.hasNextLine()){
            counter++;
            String wholeLineOfJs = jsScanner.nextLine();
            if(validateSingleLine(wholeLineOfJs) == false){
                String message = String.format("line %d was bonkers", counter);
                bigString += message;
                System.out.println(message);
                totalIssues++;
            } else {
//                    System.out.println("this line is fine");
            }
        }
        System.out.println("total lines" + counter);
        System.out.println("total issues" + totalIssues);
        return bigString;
    }

    public static boolean validateSingleLine(String singleLine){
//        check whether it passes whatever test we set up
//        return true or false
        /*
        Don’t show an error if the line is empty.
        Don’t show an error if the line ends with an opening curly brace {
        Don’t show an error if the line ends with an closing curly brace }
        Don’t show an error if the line contains if or else
         */
//        System.out.println("single line: " + singleLine);
//        if(singleLine.isEmpty()){
//            return true;
//        } else if (singleLine.endsWith("}") || singleLine.endsWith("{")){
//            return true;
//        } else if(singleLine.contains("if") || singleLine.contains("else")){
//            return true
//        }
        if(
                singleLine.isEmpty() ||
                singleLine.endsWith("}") ||
                singleLine.endsWith("{") ||
                singleLine.endsWith(";") ||
                singleLine.contains("if") ||
                singleLine.contains("else")
        ) return true;


        return false;
    }
}
