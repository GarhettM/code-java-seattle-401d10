/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package unicorns;

import com.google.gson.Gson;

import java.io.*;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws IOException {
        System.out.println(new App().getGreeting());
        Gson gson = new Gson();

        Unicorn james = new Unicorn("blue", true, 100000, "James");
        Unicorn ginger = new Unicorn("red", false, 2, "Ginger");
        Unicorn victor = new Unicorn("salmon", true, 99999, "Victor");

        james.makeNoise();
        System.out.println(ginger);
        System.out.println(victor);
        victor.makeNoise();

        String jamesJson = gson.toJson(james);
        String gingerJson = gson.toJson(ginger);
        String victorJson = gson.toJson(victor);

        System.out.println(jamesJson);

        gson.fromJson(jamesJson, Unicorn.class).makeNoise();
        Unicorn gingerFromJson = gson.fromJson(gingerJson, Unicorn.class);
        gingerFromJson.makeNoise();
        System.out.println(gingerFromJson);

//        We can turn a "Unicorn's" Json into a Cupcake because there is nothing dictating
//        that the key value pairs ever belonged to a unicorn
        Cupcake victorCupcake = gson.fromJson(victorJson, Cupcake.class);
        System.out.println(victorCupcake);

//        Gson can parse nested objects into their correct types form JSON
        james.bakedGoods.add(victorCupcake);
        james.bakedGoods.add(victorCupcake);
        james.bakedGoods.add(victorCupcake);
        james.bakedGoods.add(victorCupcake);
        String jamesWithCupcakeJson = gson.toJson(james);

        System.out.println(jamesWithCupcakeJson);
        Unicorn james2 = gson.fromJson(jamesWithCupcakeJson, Unicorn.class);
        System.out.println(james2);
        System.out.println(james2.bakedGoods);

//        Very small json into Unicorn or cupcake
        String edStr = "{\"name\":\"Ed\"}";
        Cupcake edCupcake = gson.fromJson(edStr, Cupcake.class);
        System.out.println(edCupcake);

        Unicorn edUnicorn = gson.fromJson(edStr, Unicorn.class);
        System.out.println(edUnicorn);

        String ameliaStr = "{\"firstName\":\"Amelia\"}";
        Unicorn ameliaUnicorn = gson.fromJson(ameliaStr, Unicorn.class);
        System.out.println(ameliaUnicorn);

//        Put Json into a file with Gson + FileWriter
        File file = new File("src/main/resources/jamesUnicorn.json");
        file.createNewFile();
        FileWriter fileWriter = new FileWriter(file);
        gson.toJson(james2, fileWriter);
//        Think of .close() as save or the termination of writing
        fileWriter.close();

//        Get Objects out of a file with Gson + FileReader, || BufferedReader
        File file2 = new File("src/main/resources/jamesUnicorn.json");
        FileReader reader = new FileReader(file2);
        Unicorn james3 = gson.fromJson(reader, Unicorn.class);
        System.out.println(james3);
        System.out.println(james3.bakedGoods);

//        In your lab you will have a json file with an Array of Quotes
//        you will need to retrieve them and pick one randomly and print it
//        How to get an array of objects out of a json file with gson
    }
}
